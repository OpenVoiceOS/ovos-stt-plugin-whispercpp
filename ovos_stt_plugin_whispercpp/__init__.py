import os
import subprocess
from tempfile import NamedTemporaryFile

import requests
from ovos_plugin_manager.templates.stt import STT
from ovos_utils.log import LOG
from ovos_utils.xdg_utils import xdg_data_home


class WhispercppSTT(STT):
    DOWNLOAD_URL = "https://ggml.ggerganov.com/ggml-model-whisper-{model}.bin"
    MODELS = ("tiny.en", "tiny", "base.en", "base", "small.en", "small", "medium.en", "medium", "large")
    LANGUAGES = {
        "en": "english",
        "zh": "chinese",
        "de": "german",
        "es": "spanish",
        "ru": "russian",
        "ko": "korean",
        "fr": "french",
        "ja": "japanese",
        "pt": "portuguese",
        "tr": "turkish",
        "pl": "polish",
        "ca": "catalan",
        "nl": "dutch",
        "ar": "arabic",
        "sv": "swedish",
        "it": "italian",
        "id": "indonesian",
        "hi": "hindi",
        "fi": "finnish",
        "vi": "vietnamese",
        "iw": "hebrew",
        "uk": "ukrainian",
        "el": "greek",
        "ms": "malay",
        "cs": "czech",
        "ro": "romanian",
        "da": "danish",
        "hu": "hungarian",
        "ta": "tamil",
        "no": "norwegian",
        "th": "thai",
        "ur": "urdu",
        "hr": "croatian",
        "bg": "bulgarian",
        "lt": "lithuanian",
        "la": "latin",
        "mi": "maori",
        "ml": "malayalam",
        "cy": "welsh",
        "sk": "slovak",
        "te": "telugu",
        "fa": "persian",
        "lv": "latvian",
        "bn": "bengali",
        "sr": "serbian",
        "az": "azerbaijani",
        "sl": "slovenian",
        "kn": "kannada",
        "et": "estonian",
        "mk": "macedonian",
        "br": "breton",
        "eu": "basque",
        "is": "icelandic",
        "hy": "armenian",
        "ne": "nepali",
        "mn": "mongolian",
        "bs": "bosnian",
        "kk": "kazakh",
        "sq": "albanian",
        "sw": "swahili",
        "gl": "galician",
        "mr": "marathi",
        "pa": "punjabi",
        "si": "sinhala",
        "km": "khmer",
        "sn": "shona",
        "yo": "yoruba",
        "so": "somali",
        "af": "afrikaans",
        "oc": "occitan",
        "ka": "georgian",
        "be": "belarusian",
        "tg": "tajik",
        "sd": "sindhi",
        "gu": "gujarati",
        "am": "amharic",
        "yi": "yiddish",
        "lo": "lao",
        "uz": "uzbek",
        "fo": "faroese",
        "ht": "haitian creole",
        "ps": "pashto",
        "tk": "turkmen",
        "nn": "nynorsk",
        "mt": "maltese",
        "sa": "sanskrit",
        "lb": "luxembourgish",
        "my": "myanmar",
        "bo": "tibetan",
        "tl": "tagalog",
        "mg": "malagasy",
        "as": "assamese",
        "tt": "tatar",
        "haw": "hawaiian",
        "ln": "lingala",
        "ha": "hausa",
        "ba": "bashkir",
        "jw": "javanese",
        "su": "sundanese",
    }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.bin = self.config.get("binary") or os.path.expanduser("~/.local/bin/whispercpp")
        # self.bin = os.path.expanduser("~/whisper.cpp/main")
        if not self.bin:
            LOG.error(
                "you need to manually install whisper.cpp, please provide full path to ./main binary generated by compiling https://github.com/ggerganov/whisper.cpp")

        self.model_folder = self.config.get("model_folder") or f"{xdg_data_home()}/whispercpp"
        model = self.config.get("model")
        if not model:
            if self.lang.startswith("en"):
                model = "tiny.en"
            else:
                model = "tiny"
        os.makedirs(self.model_folder, exist_ok=True)
        self.model_path = self.get_model(model)

    def get_model(self, model_name):
        if os.path.isfile(model_name):
            return model_name
        if model_name not in self.MODELS:
            raise ValueError(f"unknown model for Whisper: {model_name}")
        model_path = f"{self.model_folder}/{model_name}"
        if not os.path.isfile(model_path):
            url = self.DOWNLOAD_URL.format(model=model_name)
            LOG.info(f"Downloading {url}")
            data = requests.get(url).content
            with open(model_path, "wb") as f:
                f.write(data)
        return model_path

    def execute(self, audio, language=None, model=None):
        lang = language or self.lang
        if model:
            if not os.path.isfile(model):
                model = self.get_model(model)

        model = model or self.model_path

        with NamedTemporaryFile() as f:
            f.write(audio.get_wav_data())
            lang = lang.split('-')[0].lower()
            cmd = f"{self.bin} -m {model} -l {lang} -f {f.name}"
            t = subprocess.check_output(cmd, shell=True, stderr=subprocess.PIPE).decode("utf-8")
            transcript = t.split("] ")[-1].strip()

        return transcript

    @property
    def available_languages(self) -> set:
        return set(self.LANGUAGES.keys())


WhispercppSTTConfig = {
    lang: [{"model": "tiny",
            "lang": lang,
            "meta": {
                "priority": 50,
                "display_name": f"WhisperCPP (Tiny)",
                "offline": True}
            },
           {"model": "base",
            "lang": lang,
            "meta": {
                "priority": 55,
                "display_name": f"WhisperCPP (Base)",
                "offline": True}
            },
           {"model": "small",
            "lang": lang,
            "meta": {
                "priority": 60,
                "display_name": f"WhisperCPP (Small)",
                "offline": True}
            }
           ]
    for lang, lang_name in WhispercppSTT.LANGUAGES.items()
}

if __name__ == "__main__":
    b = WhispercppSTT()

    from speech_recognition import Recognizer, AudioFile

    with AudioFile("/home/user/PycharmProjects/selene_api/test/test.wav") as source:
        audio = Recognizer().record(source)

    a = b.execute(audio, model="base")

    print(a)
