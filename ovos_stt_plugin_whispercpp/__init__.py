import os
import subprocess
from tempfile import NamedTemporaryFile

import requests
from ovos_plugin_manager.templates.stt import STT
from ovos_utils.log import LOG
from ovos_utils.xdg_utils import xdg_data_home


class WhispercppSTT(STT):
    download_url = "https://ggml.ggerganov.com/ggml-model-whisper-{model}.bin"
    models = ("tiny.en", "tiny", "base.en", "base", "small.en", "small", "medium.en", "medium", "large")

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.bin = self.config.get("binary") or os.path.expanduser("~/.local/bin/whispercpp")
        # self.bin = os.path.expanduser("~/whisper.cpp/main")
        if not self.bin:
            LOG.error(
                "you need to manually install whisper.cpp, please provide full path to ./main binary generated by compiling https://github.com/ggerganov/whisper.cpp")

        self.model_folder = self.config.get("model_folder") or f"{xdg_data_home()}/whispercpp"
        model = self.config.get("model")
        if not model:
            if self.lang.startswith("en"):
                model = "tiny.en"
            else:
                model = "tiny"
        os.makedirs(self.model_folder, exist_ok=True)
        self.model_path = self.get_model(model)

    def get_model(self, model_name):
        if os.path.isfile(model_name):
            return model_name
        if model_name not in self.models:
            raise ValueError(f"unknown model for Whisper: {model_name}")
        model_path = f"{self.model_folder}/{model_name}"
        if not os.path.isfile(model_path):
            url = self.download_url.format(model=model_name)
            LOG.info(f"Downloading {url}")
            data = requests.get(url).content
            with open(model_path, "wb") as f:
                f.write(data)
        return model_path

    def execute(self, audio, language=None, model=None):

        lang = language or self.lang
        if model:
            if not os.path.isfile(model):
                model = self.get_model(model)
        else:
            model = self.model_path

        with NamedTemporaryFile() as f:
            f.write(audio.get_wav_data())
            lang = lang.split('-')[0].lower()
            cmd = f"{self.bin} -m {model} -l {lang} -f {f.name}"
            t = subprocess.check_output(cmd, shell=True, stderr=subprocess.PIPE).decode("utf-8")
            transcript = t.split("] ")[-1].strip()

        return transcript


if __name__ == "__main__":
    b = WhispercppSTT()

    from speech_recognition import Recognizer, AudioFile

    with AudioFile("/home/user/PycharmProjects/selene_api/test/test.wav") as source:
        audio = Recognizer().record(source)

    a = b.execute(audio, model="base")

    print(a)
